#! /usr/bin/env bash

declare -i Debug
Debug=0

function error {
	echo "Error: $1" 1>&2
}

function debug {
	(( $Debug )) && echo "Debug: $1" 1>&2
}

function print_output {
	echo "$1" >> $output_file
}

usage() { echo 'Usage: command [-h ] [-p <string>] <output>' 1>&2; exit 1; }
while getopts ":h" o; do
	case "" in
		h|*) usage; ;;
	esac
done
shift $((OPTIND-1))

output_file=$1
#[[ ! -e "$output_file" ]] && error "could not find file '$output_file'" && exit
rm -f $output_file
output_dir=$(dirname "$output_file")

function eject_function {
	debug '--eject_function'
	tmp=$(mktemp)

	#get the file and create the regex to find the declaration
	IFS=':'; read -ra FILE <<< "$1"
	code_file="$output_dir/${FILE[0]}"
	pattern=${FILE[1]}
	debug "$code_file"
	debug "$pattern"
	IFS='(), '; read -ra patternParts <<< "$pattern"
	patternRegex="${patternParts[0]}.*\(.*"
	for part in ${patternParts[@]:1}; do
		patternRegex="$patternRegex$part.*"
	done
	patternRegex="$patternRegex\)"
	debug "$patternRegex"

	insection=0
	whitespace=''
	declare -i openBraceCount closeBraceCount inBrace
	while IFS= read line; do
		if [[ $insection == 0 && "$line" =~ $patternRegex && ! "$line" =~ \;$ ]]; then
			insection=1
			debug "match: $line"
			[[ "$line" =~ ^[[:space:]]* ]]
			whitespace=$BASH_REMATCH
		elif [[ $insection == 0 ]]; then
			debug "fromfile $line" '>> $tmp'
			echo "$line" >> $tmp
		fi

		if [[ $insection = 1 ]]; then
			openBraces=${line//[^\{]}
			closeBraces=${line//[^\}]}
			openBraceCount=$((openBraceCount + ${#openBraces}))
			closeBraceCount=$((closeBraceCount + ${#closeBraces}))
			inBrace=$((inBrace + openBraceCount))
			braceDiff=$((openBraceCount - closeBraceCount))

			debug "line: $line"
			debug "obc: $openBraceCount"
			debug "cbc: $closeBraceCount"
			debug "ib: $inBrace"
			debug "bd: $braceDiff"

			if (( inBrace != 0 && braceDiff <= 0 )); then
				debug "endCode"
				insection=0
				inBrace=0
				openBraceCount=0
				closeBraceCount=0
				while IFS=  read codeline; do debug "fromsource $whitespace$codeline"; done < $2
				while IFS=  read codeline; do echo "$whitespace$codeline" >> $tmp; done < $2
			fi

		fi
	done < $code_file

	cp $tmp $code_file
	rm $tmp
}

function eject_explicit {
	#parse the input file
	IFS=' :'; read -ra FILE <<< "$1:"
	code_file="$output_dir/${FILE[0]}"
	startdelim=${FILE[1]}
	enddelim=${FILE[2]}
	tmp=$(mktemp)

	#read the actual file and substitute the code section
	insection=0
	whitespace=''
	#echo "moving code to $file" 1>&2
	while IFS= read line; do
		if [[ $insection == 0 && "$line" =~ "$startdelim" ]]; then
			insection=1
			#get the whitespace of this line
			[[ "$line" =~ ^[[:space:]]* ]]
			#if this is the master then include code in the output
			whitespace=$BASH_REMATCH
			echo $line >> $tmp
			while read line; do echo "$whitespace$line" >> $tmp; done < $2
		elif [[ $insection == 1 && "$line" =~ "$enddelim" ]]; then
			insection=0
			echo $line >> $tmp
		elif [[ $insection == 0 ]]; then
			echo $line >> $tmp
		fi
	done < $code_file

	#cat $tmp
	cp $tmp $code_file
}

function eject_code {

	declare -i code_lines=$(<$2 wc -l)
	if (( code_lines == 0)); then
		return 0
	fi
	IFS=' '
	read -ra outfiles <<< "$1"
	for outfile in ${outfiles[@]}
	do
		#echo $outfile
		if [[ "$outfile" =~ '!' ]]; then
			cat $2 >> $output_file #if this is the master append the output
		elif [[ "$outfile" =~ ^\`\`\` ]]; then
			continue
		elif [[ "$outfile" =~ .*:.*\(.*\) ]]; then
			eject_function "$outfile" "$2"
		elif [[ "$outfile" =~ .*\:.*:.* ]]; then
			eject_explicit "$outfile" "$2"
		else
			echo 'error'
		fi
	done
	#echo $1

}

incode=0
buffer=''
fileline=''
while IFS='' read inline; do

	if [[ "${inline}" =~ ^\`\`\` && $incode == 0 ]]; then
		incode=1
		print_output "$inline"
		buffer=$(mktemp)
		fileline="$inline"
	elif [[ "${inline}" =~ ^\`\`\` && $incode == 1 ]]; then
		incode=0
		eject_code "$fileline" "$buffer"
		print_output "${inline}"
		IFS=''
		rm -f $buffer
	elif [[ $incode == 1 ]]; then
		echo "$inline" >> $buffer
	else
		print_output "$inline"
	fi

done
